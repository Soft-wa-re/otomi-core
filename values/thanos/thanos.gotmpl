{{- $v := .Values }}
{{- $vl:= $v.apps.thanos }}
{{- $obj := $vl.objstore }}
{{- $sp := $obj.storageProvider | get "type" dict }}


## @section Thanos Query parameters
query:
  enabled: true
  replicaCount: {{ $vl.query.replicaCount }}
  extraFlags:
    - "--query.auto-downsampling"
  dnsDiscovery:
    enabled: false
  stores:
    - "thanos-storegateway:10901"
    {{- range $i := until $vl.receiver.replicaCount }}
    - "thanos-receive-{{ $i }}.thanos-receive-headless.monitoring.svc.cluster.local:10901"
    {{- end }}
  replicaLabel:
    - replica
    - prometheus_replica

  resources:
    {{- with $vl.query | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }}  

## @section Thanos Query Frontend parameters
queryFrontend:
  enabled: true
  resources:
    {{- with $vl.queryFrontend | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }}  

## @section Thanos Bucket Web parameters
bucketweb:
  enabled: true
  resources:
    {{- with $vl.bucketweb | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }}  

## @section Thanos Compactor parameters
compactor:
  enabled: true
  retentionResolutionRaw: {{ $vl.compactor.retentionResolutionRaw }}
  retentionResolution5m: {{ $vl.compactor.retentionResolution5m }}
  retentionResolution1h: {{ $vl.compactor.retentionResolution1h }}
  extraFlags:
    - --deduplication.replica-label=replica
  persistence:
    size: {{ $vl.compactor.persistence.size }}
  resources:
    {{- with $vl.storegateway | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }} 

## @section Thanos Store Gateway parameters
storegateway:
  enabled: true
  persistence:
    size: {{ $vl.storegateway.persistence.size }}
  resources:
    {{- with $vl.storegateway | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }} 

## @section Thanos Receive parameters
receive:
  enabled: true
  replicationFactor: 1
  mode: {{ $vl.receiver.mode }}
  replicacount: {{ $vl.receiver.replicaCount }}
  persistence:
    size: {{ $vl.receiver.persistence.size }}
  resources:
    {{- with $vl.receiver | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }} 
  service:
    additionalHeadless: true

## @section Thanos Ruler parameters
ruler:
  enabled: {{ $vl.ruler.enabled }}
  persistence:
    size: {{ $vl.ruler.persistence.size }}
  resources:
    {{- with $vl.ruler | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
    {{- end }} 
  alertmanagers:
    - http://prometheus-operator-alertmanager.monitoring.svc.cluster.local:9093
  config: |-
    groups:
      - name: "metamonitoring"
        rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="monitoring/prometheus-operator"}) 

## @param objstoreConfig The [objstore configuration](https://thanos.io/tip/thanos/storage.md/)
## Specify content for objstore.yml
##
{{- if eq $sp "minioLocal" }}
objstoreConfig: |-
  type: s3
  config:
    bucket: thanos
    endpoint: minio.minio.svc.cluster.local:9000
    access_key: otomi-admin
    secret_key: {{ $v.otomi.adminPassword }}
    insecure: true
{{- end }}
{{- if eq $sp "s3" }}
objstoreConfig: |-
  type: s3
  config:
    bucket: {{ $sp.s3.bucket }}
    endpoint: {{ $sp.s3.s3Url }}
    access_key: {{ $sp.s3.accessKey }}
    secret_key: {{ $sp.s3.secretKey }}
    insecure: true
{{- end }}
