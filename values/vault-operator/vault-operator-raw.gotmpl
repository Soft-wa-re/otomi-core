{{- $v := .Values }}
{{- $cm := index $v.apps "cert-manager" }}
{{- $tc := $v.teamConfig }}
{{- $vt := $v.apps.vault }}
{{- $k := $v.apps.keycloak }}
{{- $seal := $vt | get "seal"  (dict "type" "default") }}
{{- $kms := $v | get "kms" dict }}
{{- $rootCASecretName := "root-ca" }}
{{- $vaultVersion := "1.6.1" }}
{{- $bankVaultsVersion := $vt | get "image.tag" "1.15.2" }}

resources:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: vault-file
    spec:
      # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
      # storageClassName: ""
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

{{- if and (hasKey $seal "kmsKeyId") (hasKey $kms "gcpckms")  }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: service-account-key
    type: Opaque
    data:
      service-account.json: "{{ $kms.gcpckms.kmsAccount | b64enc }}"
{{- end }}

# RBAC
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: vault
  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["*"]
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["get", "update", "patch"]
  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    roleRef:
      kind: Role
      name: vault
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: vault
  # This binding allows the deployed Vault instance to authenticate clients
  # through Kubernetes ServiceAccounts (if configured so).
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: vault-auth-delegator
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:auth-delegator
    subjects:
      - kind: ServiceAccount
        name: vault
        namespace: vault
{{- if $v._derived.untrustedCA }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: {{ $rootCASecretName }}
    type: Opaque
    data:
      tls.crt: {{ $v._derived.caCert | b64enc }}
{{- end }}