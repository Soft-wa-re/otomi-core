{{- $v := .Values }}
{{- $vl:= $v.apps.minio }}
{{- $k := $v.apps.keycloak }}
{{- $minioDomain := printf "minio.%s" $v.cluster.domainSuffix }}
{{- $rootCASecretName := "root-ca" }}

mode: standalone
auth:
  rootUser: otomi-admin
  rootPassword: {{ $v.otomi.adminPassword }}

## OIDC configuration
{{/* To do: add mappers to Keycloak task
extraEnvVars:
  - name: MINIO_IDENTITY_OPENID_CONFIG_URL
    value: {{ $v._derived.oidcWellKnownUrl }}
  - name: MINIO_IDENTITY_OPENID_CLIENT_ID
    value: {{ $k.idp.clientID  }}
  - name: MINIO_IDENTITY_OPENID_CLIENT_SECRET
    value: {{ $k.idp.clientSecret }}
  - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
    value: policy
  - name: MINIO_IDENTITY_OPENID_SCOPES
    value: openid
  - name: MINIO_IDENTITY_OPENID_REDIRECT_URI
    value: "https://{{ $minioDomain }}/oauth_callback"
*/}}

{{- if $v._derived.untrustedCA }}
extraVolumes:       
  - name: root-ca-1
    secret:
      secretName: root-ca
  - name: root-ca-2
    secret:
      secretName: root-ca
extraVolumeMounts:
  - name: root-ca-1
    mountPath: '/opt/bitnami/minio/certs/CAs/tls.crt'
    subPath: tls.crt
  - name: root-ca-2
    mountPath: '/certs/CAs/tls.crt'
    subPath: tls.crt
{{- end }}


persistence:
  enabled: {{ $vl.persistence.enabled}}
  size: {{ $vl.persistence.size }}

resources:
  {{- with $vl | get "resources" nil }}
  {{- toYaml . | nindent 2 }}
  {{- else }}
  requests:
    cpu: 500m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi
  {{- end }}

{{- if $vl.provisioning.enabled }}
provisioning:
  enabled: true
  resources:
    {{- with $vl | get "resources" nil }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi
    {{- end }}
  buckets:
    - name: velero
    - name: thanos
    - name: loki
    - name: harbor
  policies:
    - name: otomi-apps
      statements:
        - effect: Allow
          principal:
            AWS:
            - "*"
          actions:
          - s3:GetBucketLocation
          - s3:ListBucketMultipartUploads
          resources:
          - arn:aws:s3:::velero
          - arn:aws:s3:::thanos
          - arn:aws:s3:::loki
          - arn:aws:s3:::harbor 
        - effect: Allow
          principal:
            AWS:
            - "*"
          actions:
          - s3:ListBucket
          resources:
          - arn:aws:s3:::velero
          - arn:aws:s3:::thanos
          - arn:aws:s3:::loki
          - arn:aws:s3:::harbor
          condition:
            StringEquals:
              s3:prefix:
              - "*"
        - effect: Allow
          principal:
            AWS:
            - "*"
          actions:
          - s3:ListMultipartUploadParts
          - s3:PutObject
          - s3:AbortMultipartUpload
          - s3:DeleteObject
          - s3:GetObject
          resources:
          - arn:aws:s3:::velero/**
          - arn:aws:s3:::thanos/**
          - arn:aws:s3:::loki/**
          - arn:aws:s3:::harbor/**
{{- end }}